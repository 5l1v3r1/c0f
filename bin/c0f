#!/usr/bin/env ruby
# c0f - CAN of Fingers 
# 
# Analyzes CAN bus packets to create a fingerprint or identify a BUS line 
# 
# (c) 2015 Craig Smith <craig@theialabs.com> GPLv3 

require 'optparse'
require 'methadone'
require 'formatador'
require 'json'
require 'c0f.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging

  # Main c0f routine
  main do |candevice|
    options[:progress] = false if options[:quiet] == true
    @stat = C0f::CANPacketStat.new
    candb = nil
    candump = nil
    if candevice then
      if options[:logfile] then
        puts "You can specify logfile OR a candevice but not both"
        exit 1
      end
    end
    if not candevice and not options[:logfile] and not options["add-fp"] then
      puts "Current use does not perform a valid action.  See --help"
      exit -1
    end
    @stat.pattern = options["find-pattern"] if options["find-pattern"]
    if options[:fpdb] then
      candb = C0f::CANFingerprintDB.new(options[:fpdb])
      puts "Loaded #{candb.count} fingerprints from DB" if not options[:quiet]
    end
    if not options["add-fp"].nil? then
      if candb.nil? then
        puts "Can not add a fingerprint unless a DB is specified"
        exit 5
      else
        if not File.exists? options["add-fp"] then
          puts "Fingerprint JSON file not found"
          exit 6
        else
          fp = JSON.parse(File.read(options["add-fp"]))
          if fp["Make"] == "Unknown" then
            puts "You must specify at *least* the make before adding the fingerprint to the DB"
            exit 20
          end
          orig_fp = fp.clone  # Make a copy because match_json is destructive
          closest_fp = candb.match_json(fp)
          if closest_fp["Confidence"] == 100 then
            puts "Base Fingerprint already exists. TODO: Added common ID matching/inserting"
            exit 10
          else
             id = candb.insert_json(orig_fp)
             puts "Successfully inserted fingprint (#{id})" if id
          end
        end
      end
    end
    if not candevice.nil? then
      progress = Formatador::ProgressBar.new(options["sample-size"]) { |b| 
        b.opts[:color] = "green"
        b.opts[:started_at] = Time.now
        b.opts[:label] = "Reading Packets..." 
      } if options[:progress]
      IO.popen "candump -t a -n #{options["sample-size"]} #{candevice}" do |pipe|
       pipe.each do |line|
          progress.increment if options[:progress]
          pkt = C0f::CANPacket.new
          @stat.add pkt if pkt.parse line
        end
      end
    end
    if options[:logfile] then
      log = options[:logfile]
      if File.read log then
        lines = File.readlines(log)
        progress = Formatador::ProgressBar.new(lines.count) { |b| 
          b.opts[:color] = "green"
          b.opts[:started_at] = Time.now
          b.opts[:label] = "Loading Packets..." 
        } if options[:progress]
        lines.each do |line|
          progress.increment if options[:progress]
          pkt = C0f::CANPacket.new
          @stat.add pkt if pkt.parse line
        end
      else
        puts "Could not read logfile #{log}"
        exit 3
      end
    end
    puts @stat if @stat.pkt_count > 0 and options["print-stats"]
    if options["find-pattern"] then
      s = "{ \"Matches\": [ "
      matches = []
      @stat.find_pattern_matches.each do |match|
        matches << " { \"ID\": \"" + match["pkt"].id + "\", \"Position\": \"" + match["pos"].to_s + "\", \"Values\": [ \"" + match["values"][0].to_s + "\", \"" + match["values"][1].to_s + "\" ] }"
      end
      s += matches.join(',')
      s += "] }"
      puts s
    end
    if (options["print-fp"] or options["save-fp"]) and (options[:logfile] or candevice) then
      if @stat.pkt_count < options["sample-size"] then
         puts "Fingerprinting requires at least 2000 packets"
         exit 4
      end
      fp = C0f::CANFingerprint.new(@stat)
      if candb then
        fp = candb.match_json(fp.to_json)
      end
      puts fp.to_json if options["print-fp"]
      if options["save-fp"] then
        File.open(options["save-fp"], "w") { |f| f.write fp.to_json }
      end
    end
  end

  description "CAN Bus Passive Make/Model analyzer"
  
  options["print-fp"] = true
  options[:progress] = true
  options["sample-size"] = 2000
  on("--logfile FILENAME", "CANDump logfile")
  on("--print-stats", "Prints logfile stats (Default: No)")
  on("--[no-]print-fp", "Print fingerprint info (Default: Yes)")
  on("--[no-]progress", "Print a progress bar")
  on("--add-fp FINGERPRINT", "Add a JSON fingerprint from a file to the DB")
  on("--fpdb DB", "Location of saved fingerprint DB")
  on("--quiet", "No output other than what is specified")
  on("--sample-size PACKETCOUNT", "The number of packets to process")
  on("--save-fp FILE", "Saves the fingerprint to a file")
  on("--find-pattern PATTERN", "Finds pattern in CAN data.  See docs.")
  arg :candevice, "Launch candump on a given CAN device", :optional

  version C0f::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
